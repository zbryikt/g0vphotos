{
  "name": "memcpy",
  "version": "0.5.0",
  "author": {
    "name": "Daniel Wirtz",
    "email": "dcode@dcode.io"
  },
  "contributors": [
    {
      "name": "Denys Khanzhiyev",
      "email": "xdenser@gmail.com"
    }
  ],
  "description": "Copies data between node Buffers and/or ArrayBuffers up to ~75 times faster than in pure JS.",
  "main": "src/memcpy.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/dcodeIO/node-memcpy.git"
  },
  "bugs": {
    "url": "https://github.com/dcodeIO/node-memcpy/issues"
  },
  "keywords": [
    "array",
    "buffer",
    "arraybuffer",
    "typed array"
  ],
  "dependencies": {
    "bindings": "~1.1",
    "nan": "~1.2.0"
  },
  "devDependencies": {
    "testjs": "latest"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.8"
  },
  "scripts": {
    "prepublish": "npm test",
    "test": "node node_modules/testjs/bin/testjs tests/suite.js",
    "make": "node-gyp configure build && npm test",
    "install": "node-gyp configure build"
  },
  "readme": "node-memcpy\r\n===========\r\nCopies data between node Buffers and/or ArrayBuffers up to ~75 times faster than in pure JS.\r\n\r\nWait, what?\r\n-----------\r\nnode.js utilizes a non-standard concept of I/O buffers and thus has both its Buffer as well as ArrayBuffer support.\r\nWhile Buffers are nice because they are a lot faster than V8's ArrayBuffers, transferring data between those two\r\ntypes can be ridiculously slow. This is where a node module like memcpy comes into play.\r\n\r\n```\r\n// C++ binding\r\n\r\n i memcpy.100k > cc Buffer -> Buffer: 22.756ms\r\n i memcpy.100k > cc Buffer -> ArrayBuffer: 23.861ms\r\n i memcpy.100k > cc Buffer -> Uint8Array: 22.953ms\r\n\r\n i memcpy.100k > cc ArrayBuffer -> Buffer: 22.955ms\r\n i memcpy.100k > cc ArrayBuffer -> ArrayBuffer: 23.273ms\r\n i memcpy.100k > cc ArrayBuffer -> Uint8Array: 22.685ms\r\n\r\n i memcpy.100k > cc Uint8Array -> Buffer: 23.472ms\r\n i memcpy.100k > cc Uint8Array -> ArrayBuffer: 22.975ms\r\n i memcpy.100k > cc Uint8Array -> Uint8Array: 22.953ms\r\n\r\n// Native JS\r\n\r\n i memcpy.100k > js Buffer -> Buffer: 21.617ms\r\n i memcpy.100k > js Buffer -> ArrayBuffer: 993.361ms\r\n i memcpy.100k > js Buffer -> Uint8Array: 410.010ms\r\n\r\n i memcpy.100k > js ArrayBuffer -> Buffer: 940.273ms\r\n i memcpy.100k > js ArrayBuffer -> ArrayBuffer: 1626.182ms\r\n i memcpy.100k > js ArrayBuffer -> Uint8Array: 1084.790ms\r\n\r\n i memcpy.100k > js Uint8Array -> Buffer: 386.218ms\r\n i memcpy.100k > js Uint8Array -> ArrayBuffer: 1107.530ms\r\n i memcpy.100k > js Uint8Array -> Uint8Array: 502.653ms\r\n```\r\n\r\nAPI\r\n---\r\n##### memcpy(target[, targetStart=0], source[, sourceStart=0[, sourceEnd=source.length]):bytesCopied\r\n\r\n| Argument     | Type                      | Optional  | Description\r\n|--------------|---------------------------|-----------|------------------------------------------------------------------\r\n| target       | Buffer &#124; ArrayBuffer &#124; Uint8Array | | Target buffer to copy to\r\n| targetStart  | number                    | omittable | Target offset to begin copying to, defaults to `0`\r\n| source       | Buffer &#124; ArrayBuffer &#124; Uint8Array | | Source buffer to copy from\r\n| sourceStart  | number                    | optional  | Source offset to begin copying from, defaults to `0`\r\n| sourceEnd    | number                    | optional  | Source offset to end copying from, defaults ot `source.length`\r\n| **@returns** | number                    |           | Number of bytes copied\r\n\r\nSource and target regions may overlap.\r\n\r\nUsage\r\n-----\r\n* `npm install memcpy`\r\n\r\n```js\r\nvar memcpy = require(\"memcpy\"), // C++ binding if available, else native JS\r\n    memcpy_binding = memcpy.binding, // C++ binding or NULL if not available\r\n    memcpy_native = memcpy.native; // Native JS\r\n...\r\n```\r\n\r\nPlease keep in mind that - besides the nice numbers - this is still to be considered experimental. I'd love if you'd\r\nreview the C++ code to validate that it's safe. I can't yet think of a sane use case, though, as just sticking with\r\nBuffers on node.js and ArrayBuffers in the browser should be best practice.\r\n\r\nContributors\r\n------------\r\n[Denys Khanzhiyev](https://github.com/xdenser) (node 0.11.13+ support with nan)\r\n\r\n**License:** [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/dcodeIO/node-memcpy",
  "_id": "memcpy@0.5.0",
  "_from": "memcpy@~0.5"
}
