// Generated by LiveScript 1.2.0
var fs, express, mongodb, bodyParser, crypto, passport, passportLocal, passportFacebook, expressSession, nodemailer, nodemailerSmtpTransport, backendBase, backend, r500, r404, r200, db, config, x$, pic, fav, y$, z$;
fs = require('fs');
express = require('express');
mongodb = require('mongodb');
bodyParser = require('body-parser');
crypto = require('crypto');
passport = require('passport');
passportLocal = require('passport-local');
passportFacebook = require('passport-facebook');
expressSession = require('express-session');
nodemailer = require('nodemailer');
nodemailerSmtpTransport = require('nodemailer-smtp-transport');
backendBase = require('./backend-base');
backend = backendBase;
r500 = function(res, error){
  return res.status(500).json({
    detail: error
  });
};
r404 = function(res){
  return res.status(400).send();
};
r200 = function(res){
  return res.send();
};
db = {};
config = {
  clientID: '252332158147402',
  clientSecret: '763c2bf3a2a48f4d1ae0c6fdc2795ce6',
  sessionSecret: 'featureisameasurableproperty',
  url: 'http://g0v.photos/',
  mongodbUrl: 'mongodb://localhost/g0vphotos',
  port: '9000',
  mail: {
    host: 'box590.bluehost.com',
    port: 465,
    secure: true,
    maxConnections: 5,
    maxMessages: 10,
    auth: {
      user: 'noreply@g0v.photos',
      pass: ''
    }
  }
};
backend.init(config);
x$ = backend.router.user;
x$.get('/fav', function(req, res){});
x$.put('/fav', function(req, res){});
x$['delete']('/fav', function(req, res){});
pic = backend.express.Router();
backend.app.use('/s', pic);
fav = function(value){
  return function(req, res){
    if (!!req.user.fav[req.params.id] === value) {
      return res.send();
    }
    return db.pic.findOne({
      id: req.params.id
    }, function(e, p){
      var ref$;
      if (!p) {
        return r400(res);
      }
      req.user.fav[req.params.id] = value;
      return db.user.update({
        uid: req.user.uid
      }, {
        $set: {
          fav: (ref$ = {}, ref$[req.params + ""] = value, ref$)
        }
      }, {
        w: 1
      }, function(e, r){
        if (!r) {
          r500(res, "failed to update user fav list");
        }
        p.fav += value
          ? 1
          : -1;
        return db.pic.update({
          id: req.params.id
        }, {
          $set: {
            fav: p.fav
          }
        }, {
          w: 1
        }, function(e, r){
          if (!r) {
            r500(res, "failed to update pic fav count");
          }
          return r200(res);
        });
      });
    });
  };
};
y$ = backend.router.user;
y$.get('/fav', function(req, res){
  return res.json(req.user.fav);
});
y$.put('/fav/:id', fav(true));
y$['delete']('/fav/:id', fav(false));
z$ = pic;
z$.get('/pic', function(req, res){
  var stream;
  stream = db.pic.find({}).stream();
  return backend.streamWriter(res, stream);
});
z$.post('/pic', function(req, res){
  return db.pic.insert(req.body, {
    w: 1
  }, function(e, r){
    if (!r) {
      return r500(res, "failed to add pic");
    }
  });
});
z$.get('/pic/:id', function(req, res){
  return db.pic.findOne({
    id: req.params.id
  }, function(e, r){
    if (!r) {
      return r404(res);
    }
    return res.json(r);
  });
});
z$.put('/pic/:id/fav', fav(true));
z$['delete']('/pic/:id/fav', fav(false));
z$.get('/set/:id', function(req, res){
  var stream;
  stream = db.pic.find({
    set: req.params.id
  }).stream();
  return backend.streamWriter(res, stream);
});
z$.post('/set/:id', function(req, res){
  var x$, data;
  x$ = data = import$({}, req.body);
  x$.set = req.params.id;
  return db.pic.insert(data, {
    w: 1
  }, function(e, r){
    if (!r) {
      return r500(res, "failed to add pic");
    }
  });
});
backend.start(function(arg$){
  var db, server;
  db = arg$.db, server = arg$.server;
  db.collection('pic', function(e, c){
    return db.pic = c;
  });
  return db.collection('user', function(e, c){
    return db.user = c;
  });
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}