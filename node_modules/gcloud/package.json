{
  "name": "gcloud",
  "version": "0.4.0",
  "author": {
    "name": "Google Inc."
  },
  "description": "Google Cloud APIs Client Library for Node.js",
  "contributors": [
    {
      "name": "Burcu Dogan",
      "email": "jbd@google.com"
    },
    {
      "name": "Johan Euphrosine",
      "email": "proppy@google.com"
    },
    {
      "name": "Patrick Costello",
      "email": "pcostell@google.com"
    },
    {
      "name": "Silvano Luciani",
      "email": "silvano@google.com"
    },
    {
      "name": "Stephen Sawchuk",
      "email": "sawchuk@gmail.com"
    }
  ],
  "main": "./lib/index",
  "repository": {
    "type": "git",
    "url": "git://github.com/googlecloudplatform/gcloud-nodejs"
  },
  "keywords": [
    "google",
    "api",
    "google apis",
    "client",
    "cloud",
    "datastore",
    "compute engine",
    "google storage"
  ],
  "dependencies": {
    "async": "^0.9.0",
    "bytebuffer": "^3.2.0",
    "duplexify": "^3.1.2",
    "gapitoken": "^0.1.3",
    "node-uuid": "^1.4.1",
    "protobufjs": "^3.4.0",
    "request": "^2.39.0"
  },
  "devDependencies": {
    "coveralls": "^2.11.1",
    "istanbul": "^0.3.0",
    "jsdoc": "^3.3.0-alpha9",
    "jshint": "^2.5.2",
    "mocha": "^1.21.3",
    "sandboxed-module": "^1.0.1",
    "tmp": "0.0.24"
  },
  "scripts": {
    "docs": "jsdoc -c .jsdoc.json && cp docs/module-gcloud.html docs/index.html",
    "lint": "jshint lib/ regression/ test/",
    "test": "mocha --recursive --reporter spec",
    "regression-test": "mocha regression/ --reporter spec --timeout 15000",
    "cover": "istanbul cover -x 'regression/* lib/pubsub/*' _mocha -- --timeout 15000 test/* regression/*",
    "coveralls": "istanbul cover -x 'regression/* lib/pubsub/*' _mocha --report lcovonly -- --timeout 15000 test/* regression/* -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "license": "Apache 2",
  "readme": "# Google Cloud Node.js Client\n> Node idiomatic client for Google Cloud services.\n\n[![NPM Version](https://img.shields.io/npm/v/gcloud.svg)](https://www.npmjs.org/package/gcloud)\n![Travis Build Status](https://travis-ci.org/GoogleCloudPlatform/gcloud-node.svg)\n[![Coverage Status](https://img.shields.io/coveralls/GoogleCloudPlatform/gcloud-node.svg)](https://coveralls.io/r/GoogleCloudPlatform/gcloud-node?branch=master)\n\nThis client supports the following Google Cloud services:\n\n* [Google Cloud Datastore](https://developers.google.com/datastore/)\n* [Google Cloud Storage](https://cloud.google.com/products/cloud-storage/)\n* [Google Cloud Pub/Sub (experimental)](https://developers.google.com/pubsub/)\n\nPlanned, but not yet available:\n\n* [Google Compute Engine](https://developers.google.com/compute)\n* [Google BigQuery](https://developers.google.com/bigquery/)\n\n## Quickstart\n\n```sh\n$ npm install gcloud\n```\n\n### On Google Compute Engine\n\nIf you are running this client on Google Compute Engine, you can skip to the developer's guide. We handle authorisation for you with no configuration.\n\n### Elsewhere\n\nIf you are not running this client on Google Compute Engine, you need a Google Developers service account. To create a service account:\n\n1. Visit the [Google Developers Console](https://console.developers.google.com/project).\n2. Create a new project or click on an existing project.\n3. Enable billing if you haven't already.\n4. On the \"APIs & auth\" tab, click APIs section and turn on the following. You may need to enable billing in order to use these services.\n   * Google Cloud Datastore API\n   * Google Cloud Storage\n   * Google Cloud Storage JSON API\n   * Google Cloud Pub/Sub\n5. Once API access is enabled, switch back to \"APIs & auth\" section on the navigation panel and switch to \"Credentials\" page.\n6. Click on \"Create new client ID\" to create a new **service account**. Once the account is created, click on \"Generate new JSON key\" to download your private key. The downloaded file contains credentials you'll need for authorization.\n\nYou'll need the following for auth configuration:\n\n1. Your Developers Console project's ID (e.g. bamboo-shift-455).\n2. The path to the JSON key file.\n\n### Google Cloud Datastore\n\n[Google Cloud Datastore](https://developers.google.com/datastore/) is a fully managed, schemaless database for storing non-relational data. Cloud Datastore automatically scales with your users and supports ACID transactions, high availability of reads and writes, strong consistency for reads and ancestor queries, and eventual consistency for all other queries.\n\nSee [the API documentation](https://googlecloudplatform.github.io/module-datastore.html) for how to interact with the Datastore.\n\n### Google Cloud Storage\n\nGoogle Cloud Storage allows you to store data on Google infrastructure. Read [Google Cloud Storage API docs](https://developers.google.com/storage/) for more information.\n\nYou need to create a Google Cloud Storage bucket to use this client library. Follow the steps on [Google Cloud Storage docs](https://developers.google.com/storage/) to create a bucket.\n\nSee [the API documentation](https://googlecloudplatform.github.io/module-storage.html) for how to connect to the Storage API.\n\n### Google Cloud Pub/Sub (experimental)\n\nGoogle Cloud Pub/Sub is a reliable, many-to-many, asynchronous messaging\nservice from Google Cloud Platform. A detailed overview is available on\n[Pub/Sub docs](https://developers.google.com/pubsub/overview).\n\nNote: Google Cloud Pub/Sub API is available as a Limited Preview and the\nclient library we provide is currently experimental. The API and/or the\nclient might be changed in backward-incompatible ways.\nThis API is not subject to any SLA or deprecation policy. Request to be\nwhitelisted to use it by filling the [Limited Preview application form](https://docs.google.com/a/google.com/forms/d/1IQY4LAbISLa86uxRv2dKAzkeWOyNZda_tUn7xgVYeoE/viewform).\n\n#### Configuration\n\nIf you're running this client on Google Compute Engine, you need to construct\na pubsub Connection with your Google Developers Console project ID.\n\n```js\nvar gcloud = require('gcloud');\nvar conn = new gcloud.pubsub.Connection({\n    projectId: YOUR_PROJECT_ID\n});\n```\n\nElsewhere, construct with a project ID, service account's email, and private key downloaded from Developer's Console.\n\n```js\nvar gcloud = require('gcloud');\nvar conn = new gcloud.pubsub.Connection({\n    projectId: YOUR_PROJECT_ID,\n    keyFilename: '/path/to/the/key.json'\n});\n```\n\n#### Topics and Subscriptions\n\nList, get, create and delete topics.\n\n```js\n// Lists topics.\nconn.listTopics({\n    maxResults: 5\n}, function(err, topics, nextQuery) {\n    // If there are more results, nextQuery will be non-null.\n});\n\n// Retrieve an existing topic by name.\nconn.getTopic('topic1', function(err, topic) {\n    // Delete this topic.\n    topic.del(callback);\n});\n\n// Creates a new topic named topic2.\nconn.createTopic('topic2', callback);\n```\n\nList, get, create and delete subscriptions.\n\n```js\nvar query = {\n    maxResults: 5,\n    filterByTopicName: 'topic1'\n};\n\n// List 5 subscriptions that are subscribed to topic1.\nconn.listSubscriptions(query, function(err, subs, nextQuery) {\n    // if there are more results, nextQuery will be non-null.\n});\n\n// Get a subscription named sub1.\nconn.getSubscription('sub1', function(err, sub) {\n    // delete this subscription.\n    sub.del(callback);\n});\n\n// Create a new subsription named sub2 which listens to topic1.\nconn.createSubscription({\n    topic: 'topic1',\n    name: 'sub2',\n    ackDeadlineSeconds: 60\n}, callback);\n```\n\n#### Publishing a message\n\nYou need to retrieve or create a topic to publish a message. You can either\npublish simple string messages or a raw Pub/Sub message object.\n\n```js\nconn.getTopic('topic1', function(err, topic) {\n    // Publish \"hello world\" to topic1's subscribers.\n    topic.publish('hello world', callback);\n    topic.publishMessage({\n        data: 'Some text here...',\n        label: [\n            {\n                key: 'priority',\n                numValue: 0\n            },\n            {\n                key: 'foo',\n                stringValue: 'bar'\n            }\n        ]\n    }, callback);\n});\n```\n\n#### Listening for messages\n\nYou can either pull messages one by one via a subscription, or let the client\nopen a long-lived request to poll them.\n\n```js\n// Allow client to poll messages from sub1.\n// `autoAck` automatically acknowledges the messages. (default: false)\nvar sub = conn.subscribe('sub1', {\n    autoAck: true\n});\n\nsub.on('ready', function() {\n    console.log('Listening for messages...');\n});\n\nsub.on('message', function(msg) {\n    console.log('Message retrieved:', msg);\n});\n\nsub.on('error', function(err) {\n    console.log('An error occurred:', err);\n});\n\n// Closes the connection and stop listening for messages.\nsub.close();\n```\n\n## Contributing\n\nSee [CONTRIBUTING](CONTRIBUTING.md).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/googlecloudplatform/gcloud-nodejs/issues"
  },
  "homepage": "https://github.com/googlecloudplatform/gcloud-nodejs",
  "_id": "gcloud@0.4.0",
  "_from": "gcloud@>=0.4.0"
}
