{
  "name": "decree",
  "version": "0.0.1",
  "description": "Declarative arguments-resolver",
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec --recursive tests/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/EyalAr/Decree.git"
  },
  "keywords": [
    "declarative",
    "arguments",
    "resolve",
    "disambiguate",
    "match"
  ],
  "author": {
    "name": "Eyal Arubas",
    "email": "eyalarubas@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/EyalAr/Decree/issues"
  },
  "homepage": "https://github.com/EyalAr/Decree",
  "devDependencies": {
    "mocha": "^1.20.1",
    "should": "^4.0.4"
  },
  "readme": "Declarative arguments-resolver\n\n0. [Overview](#overview)\n0. [Example](#example)\n0. [How to use](#how-to-use)\n    0. [Declaration structure](#declaration-structure)\n    0. [Errors](#errors)\n    0. [Built-in types](#built-in-types)\n    0. [Custom types](#custom-types)\n\n## Overview\n\nDecree is a declarative arguments-resolver. It saves you time and code when you\nneed to do arguments validation and disambiguation in your APIs.\n\nSimply declare the conditions your arguments should hold, such as their types\nand default values. Decree will take care of the rest, and provide you with\nclean and disambiguated arguments.\n\nIf the user provided an illegal combination of arguments, Decree will tell you\nwhere was the problem.\n\n## Example\n\nLet's say you have a function which takes 4 arguments. The task of verifying\nthe legality of the arguments is oftentimes complicated and cumbersome.\n\n**Without Decree:**\n\n```Javascript\nfunction makeCoffee(sugars, flavor, size, callback){\n    // verify arguments:\n    //   sugar: optional, non-negative number. default: 1\n    //   type: optional, string. default: 'bitter'\n    //   size: optional, string or positive integer. default: 'large'\n    //   callback: required, function\n    // was sugars provided? if not, flavor = sugars? size = flavor? callback = size?\n    // but what if flavor was not provided...?\n    // what about the callback? maybe callback = size? callback = flavor?\n    // ...\n    if (/* arguments are valid */){\n        // make coffee...\n        callback('Coffee is ready!');\n    } else {\n        throw Error('Invalid arguments!');\n    }\n}\n```\n\n **With Decree**, arguments disambiguation is easy. You just declare the properties\n of your arguments, and let Decree resolve them for you:\n\n```Javascript\nvar decree = require('decree');\n\n// argument declarations:\nvar decs = [{\n    name: 'sugars',\n    type: 'nn-decimal', // non-negative decimal\n    optional: true,\n    default: 1\n}, {\n    name: 'flavor',\n    type: 'string',\n    optional: true,\n    default: 'bitter'\n}, {\n    name: 'size',\n    types: ['string', 'p-int'],\n    optional: true,\n    default: 'large'\n}, {\n    name: 'callback',\n    type: 'function'\n}];\n\nfunction makeCoffee() {\n    decree(decs)(arguments, function(sugars, flavor, size, callback) {\n        // arguments are disambiguated and ready to be used.\n        // make coffee...\n        callback('Coffee is ready!');\n    });\n};\n```\n\n## How to use\n\nDecree needs to know what you expect. Simply build an array to describe your\nargument expectations.\n\n```Javascript\n// declarations:\nvar decs = [angle, color, callback];\n```\n\nEach item in the array is an object which describes an argument.\n\n- `angle` is required and can only be a number.\n- `color` is an optional argument. If not provided, it defaults to `white`. it\n  can be a string (`white`, `green`, etc.), an array of RGB values\n  `[R, G, B]`, or a hash `{r: R, g: G, b: B}`.\n- `callback` is required and can only be a function.\n \n Tell it to Decree:\n\n```Javascript\nvar decs = [{\n    name: 'angle',\n    type: 'number'\n}, {\n    name: 'color',\n    types: ['string', 'array', 'hash'],\n    optional: true,\n    default: 'white'\n}, {\n    name: 'callback',\n    type: 'function'\n}]\n```\n\n When finished declaring your expectations, use Decree to resolve your\n function's arguments:\n\n```Javascript\nvar decree = require('decree');\nvar decs = [ /* ... */ ];\n\nfunction foo() {\n    // pass your function's arguments directly to decree:\n    decree(decs)(arguments, function(angle, color, callback) {\n        // here you can be sure angle, color and callback are of\n        // the correct types and values\n    });\n}\n\n// use foo as normal:\nfoo(45, 'green', function() {}); //angle: 45, color: green, callback: a function\nfoo(45, function() {}); //angle: 45, color: white, callback: a function\nfoo('green', function() {}); //oops... angle is not provided. error is thrown.\n```\n\n### Declaration structure\n\nWhen declaring an argument, tell Decree:\n\n0. `name {String}`: **Optional**. Will be used to identify the argument in error\n   messages.\n0. `type {String/Function}` / `types{Array[String/Function]}`: **Required**.\n   See [built-in types](#built-in-types) or\n   [how to define a custom type](#custom-types).\n0. `optional {Boolean}`: **Optional**. Is this argument optional?\n   Defaults to `false`.\n0. `default`: **Optional**. If the argument is optional, this default value will\n   be assigned if no value is provided.\n\n```Javascript\n{\n    name: ...,\n    types: [ ... ],\n    optional: ...,\n    default: ...\n}\n```\n\n### Errors\n\nWhen there is a problem with the arguments Decree can provide a detailed\nexplanation of what went wrong. By default, an error object will be thrown,\nunless you provide a second callback which is called with the error.\n\n```Javascript\nvar decree = require('decree');\nvar decs = [ /* ... */ ];\n\nfunction foo() {\n    // pass your function's arguments directly to decree:\n    decree(decs)(arguments, function(angle, color, callback) {\n        // here you can be sure angle, color and callback are of\n        // the correct types and values\n    }, function(err) {\n        // if here, there was a problem with the arguments the user passed\n        // 'err' contains the information you need\n    });\n}\n```\n\n### Built-in types\n\nDecree supports several argument types:\n\n- `*`: Argument matches any type.\n- `array`\n- `function`\n- `hash`: Argument is a simple key-value object.\n- `string`\n- `number`\n- `n-number`: Argument is a negative number\n- `p-number`: Argument is a positive number\n- `nn-number`: Argument is a non-negative number\n- `np-number`: Argument is a non-positive number\n- `int`: Argument is an integer\n- `n-int`: Argument is a negative integer\n- `p-int`: Argument is a positive integer\n- `nn-int`: Argument is a non-negative integer\n- `np-int`: Argument is a non-positive integer\n- `decimal`: Argument is a decimal number\n- `n-decimal`: Argument is a negative decimal number\n- `p-decimal`: Argument is a positive decimal number\n- `nn-decimal`: Argument is a non-negative decimal number\n- `np-decimal`: Argument is a non-positive decimal number\n\n### Custom types\n\nComing soon\n",
  "readmeFilename": "README.md",
  "_id": "decree@0.0.1",
  "_from": "decree@0.0.1"
}
