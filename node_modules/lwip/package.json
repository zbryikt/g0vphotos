{
  "name": "lwip",
  "version": "0.0.1",
  "main": "index.js",
  "dependencies": {
    "async": "^0.9.0",
    "decree": "0.0.1"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "test": "mocha --reporter spec --recursive tests/"
  },
  "gypfile": true,
  "description": "Comprehensive, fast, and simple image processing and manipulation",
  "directories": {
    "example": "examples"
  },
  "devDependencies": {
    "mkdirp": "^0.5.0",
    "mocha": "^1.20.1",
    "should": "^4.0.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/EyalAr/lwip.git"
  },
  "keywords": [
    "image",
    "manipulate",
    "process",
    "resize",
    "scale",
    "rotate",
    "jpeg",
    "jpg",
    "crop",
    "blur",
    "batch"
  ],
  "author": {
    "name": "Eyal Arubas",
    "email": "eyalarubas@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/EyalAr/lwip/issues"
  },
  "homepage": "https://github.com/EyalAr/lwip",
  "readme": "# Light-weight image processor for NodeJS\n\n0. [Overview](#overview)\n  0. [Installation](#installation)\n  0. [Usage](#usage)\n0. [API](#api)\n  0. [Open an image](#open-an-image)\n  0. [Image operations](#image-operations)\n    0. [Resize](#resize)\n    0. [Scale](#scale)\n    0. [Rotate](#rotate)\n    0. [Crop](#crop)\n    0. [Blur](#blur)\n  0. [Getters](#getters)\n    0. [Width](#width)\n    0. [Height](#height)\n    0. [Get as a Buffer](#get-as-a-buffer)\n      0. [JPEG](#jpeg)\n    0. [Write to file](#write-to-file)\n  0. [Batch operations](#batch-operations)\n0. [Copyrights](#copyrights)\n\n## Overview\n\nThis module provides comprehensive, fast, and simple image processing and\nmanipulation capabilities.\n\n**There are no external runtime dependencies**, which means you don't have to\ninstall anything else on your system.\n\n**This module is in active development. [New features](https://github.com/EyalAr/lwip/issues?labels=feature+request&page=1&state=open) are being added.**\n\n### Installation\n\n`npm install lwip`\n\nOr, clone this repo and `cd lwip && npm install`.\n\nYou can run tests with `npm test`.\n\n### Usage\n\n**Typical workflow:**\n\n0. Open an image and get an image object.\n0. Manipulate it.\n0. Save to disk / Send image buffer over network / etc.\n\n**Example (batch operations):**\n\n```Javascript\n// obtain an image object:\nrequire('lwip').open('image.jpg', function(err, image){\n  \n  // check err...\n  // define a batch of manipulations and save to disk as JPEG:\n  image.batch()\n    .scale(0.75)          // scale to 75%\n    .rotate(45, 'white')  // rotate 45degs clockwise (white fill)\n    .crop(200)            // crop a 200X200 square from center\n    .blur(5)              // Gaussian blur with SD=5\n    .writeFile('output.jpg', function(err){\n      // check err...\n      // done.\n    });\n\n});\n```\n\n**Example (non-batch):**\n\n```Javascript\nvar lwip = require('lwip');\n\n// obtain an image object:\nlwip.open('image.jpg', function(err, image){\n  \n  // check err...\n  // manipulate image:\n  image.scale(0.5, function(err, image){\n\n    // check err...\n    // manipulate some more:\n    image.rotate(45, 'white', function(err, image){\n\n      // check err...\n      // encode to jpeg and get a buffer object:\n      image.toBuffer('jpg', function(err, buffer){\n\n        // check err...\n        // save buffer to disk / send over network / etc.\n\n      });\n\n    });\n\n  });\n\n});\n```\n\n## API\n\nAll operations are done on an `image` object. An `image` object is obtained with\nthe `open` method.\n\n### Open an image\n\n`open(path, type, callback)`\n\n0. `path {String}`: The path to the image on disk.\n0. `type {String}`: **Optional** type of the image. If omitted, the type will be\n   inferred from the file extension. Can usually be omitted. Useful to open\n   image files without extensions.\n0. `callback {Function(err, image)}`\n\n```Javascript\nvar lwip = require('lwip');\nlwip.open('path/to/image.jpg', function(err, image){\n    // check 'err'. use 'image'.\n    // image.resize(...), etc.\n});\n```\n\n### Image operations\n\n#### Resize\n\n`image.resize(width, height, inter, callback)`\n\n0. `width {Integer}`: Width in pixels.\n0. `height {Integer}`: **Optional** height in pixels. If omitted, `width` will\n   be used.\n0. `inter {String}`: **Optional** interpolation method. Defaults to `\"lanczos\"`.\n   Possible values:\n   - `\"nearest-neighbor\"`\n   - `\"moving-average\"`\n   - `\"linear\"`\n   - `\"grid\"`\n   - `\"cubic\"`\n   - `\"lanczos\"`\n0. `callback {Function(err, image)}`\n\n#### Scale\n\n`image.scale(wRatio, hRatio, inter, callback)`\n\n0. `wRatio {Float}`: Width scale ratio.\n0. `hRatio {Float}`: **Optional** height scale ratio. If omitted, `wRatio` will\n   be used.\n0. `inter {String}`: **Optional** interpolation method. Defaults to `\"lanczos\"`.\n   Possible values:\n   - `\"nearest-neighbor\"`\n   - `\"moving-average\"`\n   - `\"linear\"`\n   - `\"grid\"`\n   - `\"cubic\"`\n   - `\"lanczos\"`\n0. `callback {Function(err, image)}`\n\n#### Rotate\n\n`image.rotate(degs, color, callback)`\n\n0. `degs {Float}`: Clockwise rotation degrees.\n0. `color {String / Array / Object}`: **Optional** Color of the canvas.\n  - As a string, possible values: `\"black\"`, `\"white\"`, `\"gray\"`, `\"blue\"`,\n    `\"red\"`, `\"green\"`, `\"yellow\"`, `\"cyan\"`, `\"magenta\"`.\n  - As an array `[R, G, B]` where `R`, `G` and `B` are integers between 0 and\n    255.\n  - As an object `{r: R, g: G, b: B}` where `R`, `G` and `B` are integers\n    between 0 and 255.\n0. `callback {Function(err, image)}`\n\n#### Crop\n\n#### Crop with rectangle coordinates\n\n`image.crop(left, top, right, bottom, callback)`\n\n0. `left, top, right, bottom {Integer}`: Coordinates of the crop rectangle.\n0. `callback {Function(err, image)}`\n\n#### Crop a rectangle from center\n\n`image.crop(width, height, callback)`\n\n0. `width, height {Integer}`: Width and height of the rectangle to crop from the\n   center of the image.\n0. `callback {Function(err, image)}`\n\n#### Blur\n\nGaussian blur.\n\n`image.blur(sigma, callback)`\n\n0. `sigma {Float}`: Standard deviation of the Gaussian filter.\n0. `callback {Function(err, image)}`\n\n### Getters\n\n#### Width\n\n`image.width()` returns the image's width in pixels.\n\n#### Height\n\n`image.height()` returns the image's height in pixels.\n\n#### Get as a Buffer\n\nGet encoded binary image data as a NodeJS\n[Buffer](http://nodejs.org/api/buffer.html).\n\nWhen opening an image, it is decoded and stored in memory as an uncompressed\nimage. All manipulations are done on the uncompressed data in memory. This\nmethod allows to encode the image to one of the specified formats and get the\nencoded data as a NodeJS Buffer object.\n\n`image.toBuffer(format, params, callback)`\n\n0. `format {String}`: Encoding format. Possible values:\n  - `\"jpg\"`\n0. `params {Object}`: **Optional** Format-specific parameters (See below).\n0. `callback {Function(err, buffer)}`\n\n**Supported encoding formats:**\n\n##### JPEG\n\nThe `params` object should have the following fields:\n\n- `quality {Integer}`: Defaults to `100`.\n\n#### Write to file\n\nWrite encoded binary image data directly to a file.\n\n`image.writeFile(path, format, params, callback)`\n\n0. `path {String}`: Path of file to write.\n0. `format {String}`: **Optional** Encoding format. If omitted, will be inferred\n   from `path` extension. Possible values are specified in\n   [Get as a Buffer](#get-as-a-buffer) section.\n0. `params {Object}`: **Optional** Format-specific parameters.\n0. `callback {Function(err)}`\n\n### Batch operations\n\nEach of the [image operations](#image-operations) above can be done as part of\na batch of operations. Operations can be queued, and executed as a batch at any\ntime.\n\nEach one of the [image operations](#image-operations) has a batch equivalent\nwhich takes the same arguments, except the callback, which is not needed.\n\nWhen all batch operations had been queued, they can be executed in one of\nseveral methods, as explained below.\n\n#### Obtaining a batch object\n\nIn order to start queueing operations, a batch object first needs to be obtained\nfrom the image.\n\n```Javascript\n// obtain a batch object from the image:\nvar batch = image.batch();\n```\n\n#### Using a batch object\n\nUse the batch object to queue [image operations](#image-operations). Each of the\noperations above has a batch equivalent. Operations can be chained.\n\n**Remember, the batch manipulation methods do not take a callback.**\n\n**Example:**\n\n```Javascript\nbatch.rotate(45, 'white').scale(0.5).blur(5);\n```\n\n#### Executing a batch\n\nThere are several methods which start the execution of a batch. Once a batch\nfinishes an execution, it becomes empty and can be resued to queue additional\noperations.\n\n##### Execute batch and obtain the manipulated image object\n\nWhen all desired operations had been queued, execute the batch with the `exec()`\nmethod. `exec` takes a `callback` argument; `callback` is a function which\nreceives an error object and the manipulated image object:\n\n`batch.exec(callback)`\n\n  - `callback {Function(err, image)}`:\n    - `err`: An error object or `null` when no error.\n    - `image`: An image object of the manipulated image.\n\n```Javascript\nbatch.exec(function(err, image){\n  // check err, use image\n});\n```\n\n##### Execute batch and obtain a Buffer object\n\nBatch objects have a `toBuffer` convenience method.\n\n`batch.toBuffer(format, params, callback)`\n\nSee parameters of [`image.toBuffer()`](#get-as-a-buffer).\n\n##### Execute batch and write to file\n\nBatch objects have a `writeFile` convenience method.\n\n`batch.writeFile(path, format, params, callback)`\n\nSee parameters of [`image.writeFile()`](#write-to-file).\n\n#### Notes on batch operations\n\nAn image can have more than one batch object, but all batch objects modify the\nsame underlying image. This means the order of execution matters.\n\n```Javascript\nvar batch1 = image.batch().rotate('45', 'black');\nvar batch2 = image.batch().border(15, 'black');\n```\n\nThis will rotate the image 45degs and then add a black border:\n\n```Javascript\nbatch1.exec(function(err, image){\n    batch2.exec(function(err, image){\n        // ...\n    });\n});\n```\n\nWhile this will add a black border and then rotate the image 45degs:\n\n```Javascript\nbatch2.exec(function(err, image){\n    batch1.exec(function(err, image){\n        // ...\n    });\n});\n```\n\n## Copyrights\n\nThe native part of this module is compiled from source which uses the following:\n\n- Independent JPEG Group's free JPEG software:\n  - [Website](http://www.ijg.org/)\n  - [Readme](https://github.com/EyalAr/lwip/blob/master/lib/jpeg/README)\n- The CImg Library\n  - [Website](http://cimg.sourceforge.net/)\n  - [Readme](https://github.com/EyalAr/lwip/blob/master/lib/cimg/README.txt)\n",
  "readmeFilename": "README.md",
  "_id": "lwip@0.0.1",
  "_from": "lwip@>=0.0.1"
}
